import 'package:flutter/material.dart';

class MySearchBar extends StatefulWidget {
  final GlobalKey<ScaffoldState> myScaffoldKey;
  final AnimationController animationController;

  MySearchBar({
    required this.myScaffoldKey,
    required this.animationController,
  });

  @override
  State<MySearchBar> createState() => _MySearchBarState();
}

class _MySearchBarState extends State<MySearchBar>
    with SingleTickerProviderStateMixin {
  bool _isReadOnly = true;
  bool _isSearching = false;
  late AnimationController controller;
  late Animation<double> _menuIconAnimation;
  late Animation<Alignment> _alignmentAnimation;

  @override
  void initState() {
    controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 700),
    );
    _menuIconAnimation =
        Tween<double>(begin: 0.0, end: 1.0).animate(controller);
    _alignmentAnimation =
        Tween<Alignment>(begin: Alignment.topLeft, end: Alignment.topRight)
            .animate(controller);
    super.initState();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  void _onSearchIconPressed() {
    if (!_isSearching) {
      setState(() {
        _isSearching = true;
      });
      widget.animationController
        ..value = 0
        ..animateTo(1, curve: Curves.easeOutQuint);
      controller.forward();
    }
  }

  void _onSearchAreaPressed() {
    if (!_isSearching) {
      setState(() {
        _isSearching = true;
      });
      widget.animationController
        ..value = 0
        ..animateTo(1, curve: Curves.easeOutQuint);
      controller.forward();
    } else {
      if (_isReadOnly) {
        setState(() {
          _isReadOnly = false;
        });
      }
    }
  }

  void _onBackIconPressed() {
    if (_isSearching) {
      setState(() {
        _isSearching = false;
        _isReadOnly = true;
      });
      widget.animationController
        ..value = 1
        ..animateTo(0, curve: Curves.easeOutQuint);
      controller.reverse();
    } else {
      widget.myScaffoldKey.currentState?.openDrawer();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 40.0,
      margin: EdgeInsets.all(12.0),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(28.0),
        color: Color(0xFFF0E6E9),
      ),
      child: TextField(
        textAlignVertical: TextAlignVertical.center,
        readOnly: _isReadOnly,
        decoration: InputDecoration(
          // Align the hintText to vertical center
          alignLabelWithHint: true,
          hintText: 'Search Music',
          prefixIcon: GestureDetector(
            child: Ink(
              decoration: ShapeDecoration(
                color: Colors.transparent,
                shape: CircleBorder(),
              ),
              child: IconButton(
                // icon: Icon(Icons.menu_rounded),
                icon: AnimatedIcon(
                  icon: AnimatedIcons.menu_arrow,
                  progress: controller,
                ),
                onPressed: _onBackIconPressed,
              ),
            ),
          ),
          suffixIcon: GestureDetector(
            child: SizedBox(
              width: 96.0,
              child: Stack(
                alignment: Alignment.topRight,
                children: [
                  AnimatedAlign(
                    alignment:
                        _isSearching ? Alignment.topRight : Alignment.topLeft,
                    duration: Duration(milliseconds: 2000),
                    curve: Curves.easeOutQuint,
                    child: Ink(
                      decoration: ShapeDecoration(
                        color: Colors.transparent,
                        shape: CircleBorder(),
                      ),
                      child: IconButton(
                        icon: Icon(Icons.search_rounded),
                        onPressed: _onSearchIconPressed,
                      ),
                    ),
                  ),
                  AnimatedOpacity(
                    duration: _isSearching
                        ? Duration(milliseconds: 300)
                        : Duration(milliseconds: 1000),
                    opacity: _isSearching ? 0.0 : 1.0,
                    curve: _isSearching
                        ? Curves.easeOutQuint
                        : Curves.easeInQuint,
                    child: Ink(
                      decoration: ShapeDecoration(
                        color: Colors.transparent,
                        shape: CircleBorder(),
                      ),
                      child: IconButton(
                        // No padding.
                        padding: EdgeInsets.zero,
                        icon: CircleAvatar(
                          radius: 15.0,
                          backgroundImage:
                              AssetImage('assets/images/avatar.png'),
                        ),
                        onPressed: () {
                          // Add your avatar icon onPressed logic here
                        },
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Set the border width to 0.
          border: InputBorder.none,
        ),
        onTap: _onSearchAreaPressed,
      ),
    );
  }
}
